@using Daedalus_Orbis.Map
@attribute [StreamRendering]
@inject BrowserService Service
@inject UXEvents uxEvents
@rendermode InteractiveAuto
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation



@if (Map == null)
{
    <h3>Loading...</h3>
}
else
{
    <div class="map" @ref=inputElement @onkeydown="KeyDown" @onkeyup="KeyUp" @onmousedown="StartDrag" @onmousemove="Drag" @onmouseup="EndDrag" style="height:100%; width:100%; overflow:hidden; position:relative;">
        @foreach (TileComponentData tile in Map.Tiles)
        {
            Vector2 origin = tile.Center;
            //All Tiles not visible in the window will be ignored.
            if (origin.X < 0 || origin.X > Width)
            {
                //Console.WriteLine("skipped");
                continue;
            }
            if (origin.Y < 0 || origin.Y > Height)
            {
                //Console.WriteLine("skipped");
                continue;
            }
            <TileComponent @key=tile.Id tile=@tile size="@Map.Size" ActiveToolType="@ActiveToolType" TerrainBrush="@TerrainBrush">

            </TileComponent>
        }
    </div>
    @*<svg xmlns="http://www.w3.org/2000/svg" @ref=inputElement width="@Width" height="@Height" tabindex="-1" @onkeydown="KeyDown" @onkeyup="KeyUp" @onmousedown="StartDrag" @onmousemove="Drag" @onmouseup="EndDrag">
        @foreach (TileComponentData tile in Map.Tiles)
        {
            Vector2 origin = tile.Center;
            //All Tiles not visible in the window will be ignored.
            if(origin.X < 0 || origin.X > Width)
            {
                continue;
            }
            if (origin.Y < 0 || origin.Y > Height)
            {
                continue;
            }
            /*string cornerstring = "";
            List<Vector2> corners = this.HexagonCorners(tile);
            foreach (Vector2 corner in corners)
            {
                cornerstring += $"{corner.X},{corner.Y} ";
            }
            <TileComponent corners="@cornerstring" tile="tile" origin="origin">

            </TileComponent>*/
        }
    </svg>*@
}


@code {
    public MapComponentData? Map { get; set; }

    public Vector2yOrientation Orientation { get; set; } = new Vector2yOrientation();
    [Parameter]
    public Vector2 Size { get; set; } = new Vector2(100, 100);
    [Parameter]
    public Vector2 Origin { get; set; } = new Vector2(100, 100);

    public int Height { get; set; }
    public int Width { get; set; }

    public bool ControlPressed { get; set; } = false;
    public bool Dragging { get; set; } = false;
    public ToolType ActiveToolType;
    public TerrainType TerrainBrush;
    private HubConnection h;
    private ElementReference inputElement;
    //string user = Context


    protected override async Task OnInitializedAsync()
    {


        List<Tile> tiles = new List<Tile>();

        Map map = new Map(125);
        Map = new MapComponentData(map, Origin, Size);
        uxEvents.OnZoomIn += ZoomIn;
        uxEvents.OnZoomOut += ZoomOut;
        uxEvents.OnNewTool += UpdateToolType;
        uxEvents.OnNewTerrain += UpdateTerrainType;
        uxEvents.OnNewTileSelectedClient += NewTileSelected;
        h = new HubConnectionBuilder().WithUrl(Navigation.ToAbsoluteUri("/selectionhub")).Build();
        try
        {
            await h.StartAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetDimensions();
        if (firstRender)
        {
            await inputElement.FocusAsync();

            Map.Origin = new Vector2(Width * 0.5, Height * 0.5);
            foreach(TileComponentData tile in Map.Tiles)
            {
                tile.Center = Map.HexagonCenter(tile);
            }
            StateHasChanged();
        }


    }

    async Task GetDimensions()
    {
        try
        {
            var dimension = await Service.GetDimensions();
            Height = dimension.Height;
            Width = dimension.Width;
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }

    }

    protected async void NewTileSelected(TileComponentData t)
    {
        //var user = Context
        //Console.WriteLine("Sent Message");
        //await h.SendAsync("NewSelection", t);
    }

    protected void ZoomIn()
    {
        if (Map.Size.X <= 25)
        {
            return;
        }
        Map.Size = Vector2.Add(Map.Size, new Vector2(25, 25));

        foreach(TileComponentData tile in Map.Tiles)
        {
            tile.Center = Map.HexagonCenter(tile);
        }
    }

    protected void ZoomOut()
    {
        if (Map.Size.X >= 200)
        {
            return;
        }
        Map.Size = Vector2.Subtract(Map.Size, new Vector2(25, 25));

        foreach (TileComponentData tile in Map.Tiles)
        {
            tile.Center = Map.HexagonCenter(tile);
        }
    }

    protected void UpdateToolType(ToolType tt)
    {
        ActiveToolType = tt;
    }

    protected void UpdateTerrainType(TerrainType tt)
    {
        TerrainBrush = tt;
    }

    protected async Task KeyDown(KeyboardEventArgs args)
    {
        if (args.CtrlKey)
        {
            //Console.WriteLine("pressed");
            ControlPressed = true;
        }
    }

    protected async Task KeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "ControlLeft")
        {
            ControlPressed = false;
            Dragging = false;
        }
    }

    public void StartDrag(MouseEventArgs e)
    {
        if (ActiveToolType == ToolType.Move)
        {
            Dragging = true;
            DragOffset = Vector2.Subtract(Origin, new Vector2(e.ClientX, e.ClientY));
        }
    }

    public Vector2? DragOffset { get; set; }
    public Vector2? MapOffset { get; set; }
    public void Drag(MouseEventArgs e)
    {
        if (Dragging)
        {
            Vector2 NewOgPos = Vector2.Add(new Vector2(e.ClientX,e.ClientY), DragOffset);
            MapOffset = Vector2.Subtract(NewOgPos,Origin);
            Origin = new Vector2(e.ClientX + DragOffset.X, e.ClientY + DragOffset.Y);
            foreach(TileComponentData tile in Map.Tiles)
            {
                tile.ShiftTile(MapOffset);
            }
            //StateHasChanged();
        }
    }
    public void EndDrag (MouseEventArgs e)
    {
        Dragging = false;
    }
}